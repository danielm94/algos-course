package queues;

import edu.princeton.cs.algs4.StdRandom;


import java.util.Arrays;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class RandomizedQueue<Item> implements Iterable<Item> {
    private static final int DEFAULT_QUEUE_SIZE = 10;

    private Item[] queue;
    private int tail = 0;

    // construct an empty randomized queue
    public RandomizedQueue() {
        this.queue = (Item[]) new Object[DEFAULT_QUEUE_SIZE];
    }

    // is the randomized queue empty?
    public boolean isEmpty() {
        return tail <= 0;
    }

    // return the number of items on the randomized queue
    public int size() {
        return tail;
    }

    // add the item
    public void enqueue(Item item) {
        if (item == null) throw new IllegalArgumentException("Cannot enqueue a null element.");
        if (tail == queue.length) resize(queue.length << 1);
        queue[tail++] = item;
    }


    // remove and return a random item
    public Item dequeue() {
        if (isEmpty()) throw new NoSuchElementException("Cannot dequeue if the queue is empty.");
        int randomIndex = (int) (Math.random() * tail);
        Item item = queue[randomIndex];
        queue[randomIndex] = queue[--tail];
        queue[tail] = null;
        if (tail <= queue.length >> 2) resize(queue.length >> 1);
        return item;
    }

    // return a random item (but do not remove it)
    public Item sample() {
        if (isEmpty()) throw new NoSuchElementException("Cannot sample if the queue is empty.");
        int randomIndex = (int) (Math.random() * tail);
        return queue[randomIndex];
    }

    // return an independent iterator over items in random order
    public Iterator<Item> iterator() {
        Item[] arrayCopy = (Item[]) new Object[tail];
        System.arraycopy(queue, 0, arrayCopy, 0, tail);
        StdRandom.shuffle(arrayCopy);
        return new RandomizedQueueIterator<>(arrayCopy);
    }

    // unit testing (required)
    public static void main(String[] args) {
        RandomizedQueue<Character> queue = new RandomizedQueue<>();

        queue.enqueue('A');
        queue.enqueue('B');
        queue.enqueue('C');
        queue.enqueue('D');
        queue.enqueue('E');

        int listSize = 5;
        int queueSize = queue.size();

        System.out.printf("Does the size of the queue [%d] match the size of the list [%d]?: [%s]\n", queueSize, listSize, queueSize == listSize);

        char randomSample = queue.sample();
        System.out.printf("Does queue.sample() return a random item from the queue?: %s \n", randomSample == 'A' || randomSample == 'B' || randomSample == 'C' || randomSample == 'D' || randomSample == 'E');

        Character dequeuedValue = queue.dequeue();
        System.out.printf("Is the dequeued value of %s in the queue after calling the dequeue() method?: %s \n", dequeuedValue, !queue.isEmpty());

        System.out.println("Lets print out all of the items remaining in the queue by using the iterator() method:");
        for (char c : queue) {
            System.out.println(c);
        }

        System.out.println("Lets check the contents of two iterators generated by the iterator() method to see if each one is random");
        Iterator<Character> iteratorA = queue.iterator();
        Iterator<Character> iteratorB = queue.iterator();

        System.out.println("Iterator A:");
        while (iteratorA.hasNext()) {
            System.out.println(iteratorA.next());
        }

        System.out.println("Iterator B");
        while (iteratorB.hasNext()) {
            System.out.println(iteratorB.next());
        }

        System.out.println("Let's now empty the queue");
        while (!queue.isEmpty()) {
            System.out.println("Dequeued value: " + queue.dequeue());
        }

        System.out.println("Is the queue empty?: " + queue.isEmpty());
    }

    private static class RandomizedQueueIterator<Item> implements Iterator<Item> {
        private final Item[] shuffledArray;
        private int i = 0;

        private RandomizedQueueIterator(Item[] shuffledArray) {
            this.shuffledArray = shuffledArray;
        }

        @Override
        public boolean hasNext() {
            return i < shuffledArray.length;
        }

        @Override
        public Item next() {
            if (!hasNext()) throw new NoSuchElementException("Cannot get next item as there are no more items.");
            return shuffledArray[i++];
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException("Cannot remove items from RandomizedQueue iterator.");
        }
    }

    private void resize(int newSize) {
        Item[] newQueue = (Item[]) new Object[newSize];
        if (tail >= 0) System.arraycopy(queue, 0, newQueue, 0, tail);
        queue = newQueue;
    }
}